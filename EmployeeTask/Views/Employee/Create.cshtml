@model EmployeeTask.Models.Employee

<div class="container">
    <h2>Add Employee</h2>
    @using (Html.BeginForm("Create", "Employee", FormMethod.Post, new { @id = "employeeForm" }))
    {
        <label>Name:</label>
        @Html.TextBoxFor(m => m.EmployeeName, new { required = "required" })

        <label>Email:</label>
        @Html.TextBoxFor(m => m.Email, new { type = "email", required = "required" })

        <label>Phone:</label>
        @Html.TextBoxFor(m => m.Phone, new { required = "required" })

        <label>Department:</label>
        @Html.TextBoxFor(m => m.Department, new { required = "required" })

        <h3>Dependents</h3>
        <table id="dependentTable">
            <tr>
                <th>Name</th>
                <th>Relationship</th>
                <th>Age</th>
                <th>Action</th>
            </tr>
        </table>

        <button type="button" id="addDependent">+ Add Dependent</button>

        <button type="submit">Save Employee</button>
    }
</div>

<script>
    document.getElementById("addDependent").addEventListener("click", function () {
        let table = document.getElementById("dependentTable");
        let row = table.insertRow();
        row.innerHTML = `
            <td><input type="text" name="Dependents[][DependentName]" required></td>
            <td><input type="text" name="Dependents[][Relationship]" required></td>
            <td><input type="number" name="Dependents[][Age]" required></td>
            <td><button type="button" class="delete-btn" onclick="deleteRow(this)">X</button></td>
        `;
    });

    function deleteRow(btn) {
        let row = btn.parentNode.parentNode;
        row.parentNode.removeChild(row);
    }
</script>
